#Events for pregnancy on actions

namespace = cse_vanilla_pregnancy

#####################################
# Ordinary "I'm pregnant" events!
####################################

# for the mother
cse_vanilla_pregnancy.1001 = {
	title = pregnancy.1001.t
	desc = pregnancy.1001.d
	theme = pregnancy
	override_background = { reference = bedchamber }
	left_portrait = {
		character = root
		animation = war_over_tie
	}
	right_portrait = {
		character = scope:real_father
		triggered_animation = {
			trigger = { has_any_bad_relationship_with_character_trigger = { CHARACTER = root } }
			animation = stress
		}
		animation = happiness
	}

	trigger = {
		NOT = { has_variable = borte_first_child_var }
		carn_any_consort_or_slave_or_slave_owner_is_character_trigger = {
			CHARACTER = scope:real_father
		}
		#carn_should_suppress_on_pregnancy_notification_trigger = no
		carn_has_absolute_birth_control_trigger = no
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
		add_trait = pregnant
		scope:real_father = {
			if = {
				limit = {
					NOT = { faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active } }
				}
			}
			pregnancy_spouse_suspicion_chance_effect = yes
		}
	}

	option = {
		name = pregnancy.1001.a
	}
}

scripted_trigger former_consort_was_father = {
	OR = {
		any_former_spouse = {
			even_if_dead = yes
			this = scope:father
			this = scope:real_father
			trigger_if = {
				limit = {
					is_alive = yes
				}
				NOT = { any_consort = { this = root } }
			}
		}
		any_former_concubinist = {
			even_if_dead = yes
			this = scope:father
			this = scope:real_father
			trigger_if = {
				limit = {
					is_alive = yes
				}
				NOT = { any_consort = { this = root } }
			}
		}
		any_former_concubine = {
			even_if_dead = yes
			this = scope:father
			this = scope:real_father
			trigger_if = {
				limit = {
					is_alive = yes
				}
				NOT = { any_consort = { this = root } }
			}
		}
	}
}

# Pregnant with late husband or ex-husband's child
# by Sean Hughes
cse_vanilla_pregnancy.1101 = {
	title = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:ex_spouse = {
						is_alive = no
					}
				}
				desc = pregnancy.1101.t.dead
			}
			desc = pregnancy.1101.t.divorced
		}
	}
	desc = {
		desc = pregnancy.1101.desc.start
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:ex_spouse = {
						is_alive = no
					}
				}
				desc = pregnancy.1101.desc.dead
			}
			desc = pregnancy.1101.desc.divorced

		}
		desc = pregnancy.1101.desc.end
	}
	theme = pregnancy
	override_background = { reference = bedchamber }
	left_portrait = {
		character = root
	}
	right_portrait = scope:ex_spouse

	trigger = {
		# Event is only valid if our former spouse (dead or divorced) is both the real and assumed father (e.g., it was a legitimate pregnancy when the child was conceived).
		OR = {
			former_consort_was_father = yes
			carn_real_father_is_former_slave_or_slave_owner_trigger = yes
		}
		#carn_should_suppress_on_pregnancy_notification_trigger = no
		carn_has_absolute_birth_control_trigger = no
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
		add_trait = pregnant
		scope:father = {
			save_scope_as = ex_spouse
		}
	}

	option = {
		name = {
			trigger = {
				scope:ex_spouse = {
					is_alive = yes
				}
			}
			text = pregnancy.1101.a.divorced
		}
		name = {
			trigger = {
				scope:ex_spouse = {
					is_alive = no
				}
			}
			text = pregnancy.1101.a.dead
		}

		# Notify spouses about the pregnancy.
		every_spouse = {
			trigger_event = pregnancy.1102
		}
		# Notify the father if alive.
		scope:ex_spouse = {
			if = {
				limit = {
					is_alive = yes
				}
				trigger_event = pregnancy.1103
			}
		}
	}
}

###########################
# Bastard pregnancies
###########################

#Unmarried mother pregnant with child
cse_vanilla_pregnancy.2001 = {
	title = pregnancy.2001.t
	desc = {
		desc = pregnancy.2001.opening
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:real_father = { is_married = yes }
				}
				desc = pregnancy.2001.father_is_married
			}
			desc = pregnancy.2001.father_is_unmarried
		}
	}
	theme = pregnancy
	override_background = { reference = bedchamber }
	left_portrait = {
		character = root
	}
	right_portrait = {
		character = scope:real_father
		triggered_animation = {
			trigger = { has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:mother } }
			animation = stress
		}
		animation = happiness
	}

	trigger = {
		is_pregnant = yes # Fix to prevent pipeline failures on account of set_num_pregnancy_children being used on an unpregnant character
		NOR = {
			# If we are married or have concubines (or are a concubine) this event is not valid, as there is a (assumed) father.
			any_consort = {
				count > 0
			}
			# Same for if a former spouse/concubine got us pregant.
			OR = {
				former_consort_was_father = yes
				carn_real_father_is_former_slave_or_slave_owner_trigger = yes
			}
			# Carnalitas: slave daddies are ok.
			carn_any_consort_or_slave_or_slave_owner_is_character_trigger = {
				CHARACTER = scope:real_father
			}
		}
		#carn_should_suppress_on_pregnancy_notification_trigger = no
		carn_has_absolute_birth_control_trigger = no
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
		hidden_effect = {
			set_num_pregnancy_children = 1
			add_character_flag = {
				flag = unmarried_bastard_pregnancy
				months = 9
			}
		}
		unmarried_mother_pregnancy_effect = yes
	}

	option = { #Publicly name the father!
		name = pregnancy.2001.a
		bastardy_pregnancy_announcement_effect = yes
		hidden_effect = {
			expose_lover_secret_or_run_consequence_effect = {
				TARGET = scope:real_father
				EXPOSER = scope:mother
			}
		}
		ai_chance = {
			base = 20
			ai_value_modifier = {
				ai_honor = 0.5
				ai_boldness = 0.5
				ai_compassion = 0.25
			}
			compare_modifier = {
				value = ai_vengefulness
				trigger = {
					opinion = {
						target = scope:real_father
						value < 0
					}
					ai_vengefulness > 0
				}
			}
		}
	}

	option = { #Only tell the real_father
		name = pregnancy.2001.b
		trigger = {
			scope:real_father = { is_alive = yes }
		}
		hidden_effect = {
			add_character_flag = { #Add flag to determine what should happen in adultery.1101
				flag = planning_to_confess_to_real_father
				days = 22
			}
		}
		if = {
			limit = {
				any_owned_story = {
					story_type = story_peasant_affair
					var:peasant_character = {
						this = scope:real_father
					}
				}
			}
			add_character_flag = is_looking_for_peasant #To take the story_peasant_affair to the next step
			add_character_flag = peasant_affair_already_looking
			custom_tooltip = search_for_real_father_tt
		}
		else = {
			custom_tooltip = reveal_illegitimate_pregnancy_to_real_father_tt
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_honor = 0.5
				ai_compassion = 1
				ai_rationality = 0.5
			}
			modifier = { # Never hide the truth in faiths with the Polyamory tenet.
				factor = 0
				faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active }
			}
		}
	}

	option = { #Keep it secret!
		name = pregnancy.2001.c
		flavor = pregnancy.2001.c.tt
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_rationality = 0.5
			}
			modifier = { # Never hide the truth in faiths with the Polyamory tenet.
				factor = 0
				faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active }
			}
		}
	}

	option = { #Attempt to terminate the pregnancy
		name = pregnancy.2001.d
		pregnancy_termination_attempt_effect = yes
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_rationality = 0.5
			}
			modifier = { # Never hide the truth in faiths with the Polyamory tenet.
				factor = 0
				faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active }
			}
		}
	}
}

#Married woman pregnant with a bastard child
cse_vanilla_pregnancy.2002 = {
	type = character_event
	title = pregnancy.2002.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active } }
				desc = pregnancy.2002.desc.polyamorous
			}
			desc = pregnancy.2002.desc
		}
	}
	theme = pregnancy
	left_portrait = {
		character = root
		animation = worry
	}
	right_portrait = scope:father
	lower_center_portrait = scope:real_father

	trigger = {
		# If we are married and/or have concubines, but the real father is not one of them, it's a bastard!
		any_consort = {
			carn_gender_can_impregnate_trigger = yes
		}
		pregnancy_real_father = {
			NOT = {	is_consort_of = root }
		}

		# OBJECTION! If a former spouse/concubine is both the real and assumed father, it's not actually a bastard!
		NOR = {
			OR = {
				former_consort_was_father = yes
				carn_real_father_is_former_slave_or_slave_owner_trigger = yes
			}
			# Carnalitas: slave daddies are ok.
			carn_any_consort_or_slave_or_slave_owner_is_character_trigger = {
				CHARACTER = scope:real_father
			}
		}

		#carn_should_suppress_on_pregnancy_notification_trigger = no
		carn_has_absolute_birth_control_trigger = no
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
		# If we got pregnant before our marriage, there will be no assumed father set. However, we need one for the event logic to work correctly.
		# Since this is a pretty rare edge case, we just go ahead and set the assumed father to a current living spouse.
		if = {
			limit = {
				NOT = { exists = pregnancy_assumed_father }
			}
			random_consort = {
				save_scope_as = assumed_father
			}
			hidden_effect = {
				set_pregnancy_assumed_father = scope:assumed_father
			}
		}

		save_scope_as = mother
		hidden_effect = {
			set_num_pregnancy_children = 1
			if = {
				limit = {
					exists = primary_partner
				}
				primary_partner = {
					save_scope_as = spouse
				}
			}
			else = {
				random_consort = {
					save_scope_as = spouse
				}
			}
			add_character_flag = {
				flag = bastard_pregnancy
				months = 9
			}
		}
	}

	option = { #Confess
		name = {
			trigger = { NOT = { faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active } } }
			text = pregnancy.2002.a
		}
		name = {
			trigger = { faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active } }
			text = pregnancy.2001.a
		}
		married_mother_pregnancy_effect = yes
		add_fornicator_trait_or_nothing_effect = yes
		bastardy_pregnancy_announcement_effect = yes
		expose_lover_secret_or_run_consequence_effect = {
			TARGET = scope:real_father
			EXPOSER = scope:mother
		}
		ai_chance = {
			base = 0
			modifier = { # Never hide the truth in faiths with the Polyamory tenet.
				add = 100
				faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active }
			}
		}
	}

	option = { #Tell the real father
		name = pregnancy.2002.b
		trigger = {
			NOT = {
				exists = primary_partner
			}
		}
		if = {
			limit = {
				any_owned_story = {
					story_type = story_peasant_affair
					var:peasant_character = {
						this = scope:real_father
					}
				}
			}
			add_character_flag = is_looking_for_peasant #To take the story_peasant_affair to the next step
			add_character_flag = peasant_affair_already_looking
			custom_tooltip = search_for_real_father_tt
		}
		else = {
			custom_tooltip = reveal_illegitimate_pregnancy_to_real_father_tt
		}
		add_character_flag = { #Add flag to determine what should happen in adultery.1101
			flag = planning_to_confess_to_real_father
			days = 22
		}
		married_mother_pregnancy_effect = yes
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_honor = 0.5
				ai_compassion = 1
				ai_rationality = 0.5
			}
			modifier = { # Never hide the truth in faiths with the Polyamory tenet.
				factor = 0
				faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active }
			}
		}
		stress_impact = {
			honest = medium_stress_impact_gain
		}
	}

	option = { #Keep it secret!
		name = pregnancy.2002.c
		custom_tooltip = pregnancy.2002.c.tt
		married_mother_pregnancy_effect = yes
		stress_impact = {
			honest = major_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_rationality = 0.5
			}
			modifier = { # Never hide the truth in faiths with the Polyamory tenet.
				factor = 0
				faith = { has_doctrine_parameter = no_unfaithfulness_penalty_active }
			}
		}
	}

	option = { #Attempt to get rid of the child
		name = pregnancy.2002.d
		pregnancy_termination_attempt_effect = yes

		ai_chance = {
			base = 0
		}
	}
}
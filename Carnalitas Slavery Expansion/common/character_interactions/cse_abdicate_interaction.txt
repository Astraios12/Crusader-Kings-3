cse_abdicate_interaction = {
    category = interaction_category_vassal
    #ai_potential = { always = no }
	#ai_frequency = 0
	
    auto_accept = yes
	use_diplomatic_range = no
    common_interaction = yes
	
	desc = cse_abdicate_interaction_desc

    is_shown = {
        scope:recipient = {
			scope:recipient = scope:actor
			is_landed = yes
		}
    }
	
	send_option = {
		is_valid = { scope:actor.house = { house_head = scope:actor } }
		
		flag = cse_abdicate_as_house_head
		localization = cse_abdicate_as_house_head_loc
		starts_enabled = { scope:actor.house = { house_head = scope:actor } }
	}
	
	send_option = {
		is_valid = {
			custom_tooltip = {
				text = cse_get_refugium_loc
				scope:actor = {
					any_held_title = {
						tier = tier_barony
						trigger_if = {
							limit = { exists = title_province }
							NOT = { this = title_capital_county  }
							NOT = { this = scope:actor.capital_barony  }
							is_leased_out = no
							title_province = { has_holding_type = castle_holding }
						}
						trigger_else = { always = no }
					}
				}
			}
		}
		
		flag = cse_get_refugium
		localization = cse_get_refugium_loc
		starts_enabled = {
			scope:actor = {
				any_held_title = {
					tier = tier_barony
					trigger_if = {
						limit = { exists = title_province }
						NOT = { this = title_capital_county  }
						NOT = { this = scope:actor.capital_barony  }
						is_leased_out = no
						title_province = { has_holding_type = castle_holding }
					}
					trigger_else = { always = no }
				}
			}
		}
	}
	
	send_option = {
		is_valid = {
			scope:cse_get_refugium = yes
		}
		
		flag = cse_leave_children
		localization = cse_leave_children_loc
		starts_enabled = { scope:cse_get_refugium = yes }
	}
	
	send_option = {
		is_valid = {
			custom_tooltip = {
				text = cse_end_courtesan_lover_relationship_loc
				scope:actor = {
					any_relation = {
						type = courtesan
						has_relation_lover = scope:actor
						NOT = { has_relation_soulmate = scope:actor }
					}
				}
			}
		}
		
		flag = cse_end_courtesan_lover_relationship
		localization = cse_end_courtesan_lover_relationship_loc
		starts_enabled = {
			scope:actor = {
				any_relation = {
					type = courtesan
					has_relation_lover = scope:actor
					NOT = { has_relation_soulmate = scope:actor }
				}
			}
		}
	}
	
	send_options_exclusive = no

    on_accept = {
		scope:actor = {	
			
			save_scope_as = predecessor
			
			show_as_tooltip = {
				depose = yes
				custom_tooltip = cse_abdicate_interaction_claims_tooltip
				custom_tooltip = cse_abdicate_interaction_slaves_tooltip
			}
			
			hidden_effect = {
				
				# Save heir
				primary_heir = {
					save_scope_as = player_heir
				}
				
				# Make all weak claims on your titles into strong claims
				every_held_title = { 
					save_temporary_scope_as = abdicator_title
					every_claimant = {
						limit = { has_weak_claim_on = scope:abdicator_title }
						make_claim_strong = scope:abdicator_title
					}
				}
				
				if = {
					limit = { scope:cse_get_refugium = yes }
						
					# Ruler reserves a refugium
					every_held_title = {
						limit = {
							tier = tier_barony
							trigger_if = {
								limit = { exists = title_province }
								NOT = { this = title_capital_county  }
								NOT = { this = scope:actor.capital_barony  }
								is_leased_out = no
								title_province = { has_holding_type = castle_holding }
							}
							trigger_else = { always = no }
						}
						if = {
							limit = { NOT = { exists = scope:cse_refugium } }
							save_scope_as = cse_refugium
						}
					}
				}
			}
			
			if = {
				limit = { scope:cse_get_refugium = yes }
				show_as_tooltip = {
					every_held_title = {
						limit = { this = scope:cse_refugium }
						
						create_title_and_vassal_change = {
							type = granted
							save_scope_as = cse_change
							add_claim_on_loss = no
						}
						change_title_holder_include_vassals = {
							holder = scope:actor
							change = scope:cse_change
						}
						resolve_title_and_vassal_change = scope:cse_change
					}
				}
			}
			
			hidden_effect = {
			
				# Abdicate
				depose = yes
				
				if = {
					limit = { scope:cse_get_refugium = yes }
			
					# Heir gives refugium to predecessor
					scope:player_heir = {
						every_held_title = {
							limit = { this = scope:cse_refugium }
							
							create_title_and_vassal_change = {
								type = granted
								save_scope_as = cse_change
								add_claim_on_loss = no
							}
							change_title_holder_include_vassals = {
								holder = scope:actor
								change = scope:cse_change
							}
							resolve_title_and_vassal_change = scope:cse_change
						}
					}
					
					# Predecessor inherits heirs's realm law to ensure succession on death
					scope:actor = {
						if = {
							limit = { scope:player_heir = { has_realm_law = male_only_law } }
							add_realm_law_skip_effects = male_only_law
						}
						else_if = {
							limit = { scope:player_heir = { has_realm_law = male_preference_law } }
							add_realm_law_skip_effects = male_preference_law
						}
						else_if = {
							limit = { scope:player_heir = { has_realm_law = equal_law } }
							add_realm_law_skip_effects = equal_law
						}
						else_if = {
							limit = { scope:player_heir = { has_realm_law = female_preference_law } }
							add_realm_law_skip_effects = female_preference_law
						}
						else_if = {
							limit = { scope:player_heir = { has_realm_law = female_only_law } }
							add_realm_law_skip_effects = female_only_law
						}
					}
						
					# Children stay at heir's court
					if = {
						limit = { scope:cse_leave_children = yes }
						scope:actor = {
							trigger_event = {
								id = cse_abdicate_event.0001
								days = 5
							}
						}
					}
				}
			
				# Abdicate as house and dynasty head
				if = {
					limit = { scope:cse_abdicate_as_house_head = yes }
					scope:actor = {
						house = { save_scope_as = predecessor_house }
						random_ruler = {
							limit = {
								is_ai = yes
								is_landed = yes
								NOT = { house = scope:actor.house }
							}
							scope:actor = { set_house = PREV.house }
						}
						trigger_event = {
							id = cse_abdicate_event.0002
							days = 10
						}
					}
				}
			}
			
			# Inherit predecessor's courtesans (they want to climb the social ladder after all)
			if = {
				limit = { scope:cse_end_courtesan_lover_relationship = yes }
				every_relation = {
					type = courtesan
					if = {
						limit = {
							has_relation_lover = scope:actor
							NOT = { has_relation_soulmate = scope:actor }
						}
						scope:actor = { remove_relation_lover = PREV }
						add_opinion = {
							target = scope:actor
							modifier = cse_lover_breakup_opinion
						}
					}
				}
			}
			
			hidden_effect = {
				every_relation = {
					type = courtesan
					scope:actor = {
						remove_relation_courtesan = PREV
					}
					scope:player_heir = {
						set_relation_courtesan = PREV
					}
					if = {
						limit = {
							NOT = { is_courtier_of = scope:player_heir }
							is_landed = no
							is_concubine = no
							primary_spouse ?= { is_landed = no }
						}
						scope:player_heir = {
							add_courtier = PREV
						}
					}
				}
				
				# Inherit predecessor's slaves
				every_relation = {
					type = slave
					scope:actor = {
						remove_relation_slave = PREV
					}
					scope:player_heir = {
						set_relation_slave = PREV
					}
					if = {
						limit = { NOT = { is_courtier_of = scope:player_heir } }
						scope:player_heir = {
							add_courtier = PREV
						}
					}
				}
			}
		}
	}
}
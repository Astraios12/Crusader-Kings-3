advcm_add_new_modifiers_effect = {
	# Prowess from weapon rarity
	add_scaled_artifact_modifier_prowess_effect = yes
	
	if = {
		limit = {
			OR = {
				rarity = famed
				rarity = illustrious
			}
			OR = {
				has_artifact_feature_group = blade_decoration
				has_artifact_feature_group = hilt_decoration
				has_artifact_feature_group = shaft_decoration
				has_artifact_feature_group = head_decoration
			}
		}
		
		add_2_scaled_artifact_modifier_combat_effect = yes
	}
	else_if = {
		limit = {
			OR = {
				rarity = common
				rarity = masterwork
			}
			OR = {
				has_artifact_feature_group = blade_decoration
				has_artifact_feature_group = hilt_decoration
				has_artifact_feature_group = shaft_decoration
				has_artifact_feature_group = head_decoration
			}
		}
		
		add_scaled_artifact_modifier_combat_effect = yes
	}
	else_if = {
		limit = {
			OR = {
				rarity = famed
				rarity = illustrious
			}
			# No decorations
		}
		
		add_scaled_artifact_modifier_combat_effect = yes
		add_artifact_modifier = artifact_prowess_no_decorations_high_tier_modifier
	}
	else_if = {
		limit = {
			rarity = masterwork
			# No decorations
		}
		
		add_artifact_modifier = artifact_prowess_no_decorations_medium_tier_modifier
	}
	else = {
		add_artifact_modifier = artifact_prowess_no_decorations_modifier
	}

	# Save the quality and wealth of this artifact in case we need to reference it later. 
	set_variable = {
		name = quality
		value = scope:quality
	}
	set_variable = {
		name = wealth
		value = scope:wealth
	}
		
}

advcm_add_new_armor_modifiers_effect = {
	# Rarity determines prowess bonus
	add_scaled_artifact_modifier_prowess_effect = yes
	# Rarity determines combat bonus
	add_scaled_artifact_modifier_combat_effect = yes

	if = { # Chain mail gets a higher prowess due to the lack of decoration
		limit = { artifact_type = armor_mail }
		add_artifact_modifier = artifact_prowess_no_decorations_modifier
	}
	else_if = { # Fashion gets an attraction boost
		limit = {
			OR = {
				artifact_type = armor_brigandine
				artifact_type = armor_plate
			}
		}
		add_artifact_modifier = artifact_attraction_opinion_1_modifier
	}
	else = { # For all other armor-types you get some prestige
		add_artifact_modifier = artifact_placeholder_modifier
	}

	if = { # Gold gives more prestige
		limit = {
			OR = {
				has_artifact_feature = armor_decoration_gold_plating
				has_artifact_feature = armor_material_gold
			}
		}
		add_artifact_modifier = artifact_monthly_prestige_2_modifier
	}

	set_variable = {
		name = quality
		value = scope:quality
	}
	set_variable = {
		name = wealth
		value = scope:wealth
	}
}


random_artifact_wealth_effect = {

	random_list = {
		20 = {
			save_scope_value_as = {
				name = random_wealth_bonus
				value = 5
			} 
		}
		20 = {
			save_scope_value_as = {
				name = random_wealth_bonus
				value = 10
			} 
		}
		20 = {
			save_scope_value_as = {
				name = random_wealth_bonus
				value = 15
			} 
		}
		20 = {
			save_scope_value_as = {
				name = random_wealth_bonus
				value = 20
			} 
		}
		20 = {
			save_scope_value_as = {
				name = random_wealth_bonus
				value = 25
			} 
		}
	}
	
	save_scope_value_as = {
		name = wealth
		value = {
			value = scope:random_wealth_bonus
			
			add = scope:bonus_from_rarity
		}
	}
}

random_artifact_quality_effect = {

	random_list = {
		20 = {
			save_scope_value_as = {
				name = random_quality_bonus
				value = 4
			} 
		}
		20 = {
			save_scope_value_as = {
				name = random_quality_bonus
				value = 8
			} 
		}
		20 = {
			save_scope_value_as = {
				name = random_quality_bonus
				value = 12
			} 
		}
		20 = {
			save_scope_value_as = {
				name = random_quality_bonus
				value = 16
			} 
		}
		20 = {
			save_scope_value_as = {
				name = random_quality_bonus
				value = 20
			} 
		}
	}
	
	save_scope_value_as = {
		name = quality
		value = {
			value = scope:random_quality_bonus
			
			add = scope:bonus_from_rarity
		}
	}
}

advcm_create_weapon = {

	global_var:advcm_artifact_selected_char = {
		save_scope_value_as = {
			name = bonus_from_rarity
			value = 0
		}
		save_scope_as = owner
		random_artifact_quality_effect = yes
		random_artifact_wealth_effect = yes
		create_artifact = {
			name = artifact_$TYPE$_name
			description = placeholder
			rarity = $RARITY$
			type = $TYPE$
			visuals = $VISUALS$
			modifier = artifact_prowess_1_modifier
			generate_history = yes
			creator = root
			wealth = $WEALTH$
			quality = $QUALITY$
			save_scope_as = newly_created_artifact
		}

		if = {
			limit = { 
				root = {
					var:advcm_artifact_type = flag:advcm_bow
				}
			}
			set_variable = {
				name = artifact_bow_type
				value = flag:artifact_bow_type_bow
			}
			var:artifact_bow_type = { save_scope_as = bow_type }
		}

		if = {
			limit = { 
				root = {
					var:advcm_artifact_type = flag:advcm_longbow
				}
			}
			set_variable = {
				name = artifact_bow_type
				value = flag:artifact_bow_type_longbow
			}
			var:artifact_bow_type = { save_scope_as = bow_type }
		}

		if = {
			limit = { 
				root = {
					var:advcm_artifact_type = flag:advcm_composite_bow
				}
			}
			set_variable = {
				name = artifact_bow_type
				value = flag:artifact_bow_type_composite
			}
			var:artifact_bow_type = { save_scope_as = bow_type }
		}

		if = {
			limit = { 
				root = {
					var:advcm_artifact_type = flag:advcm_crossbow
				}
			}
			set_variable = {
				name = artifact_bow_type
				value = flag:artifact_bow_type_crossbow
			}
			var:artifact_bow_type = { save_scope_as = bow_type }
		}


		scope:newly_created_artifact = {
			get_$TYPE$_decoration_effect = yes
			get_artifact_feature_references_effect = yes
			set_artifact_description = artifact_$TYPE$_description
			#advcm_add_new_modifiers_effect = yes
			advcm_add_artifact_modifier = { NUM = 1 }
			advcm_add_artifact_modifier = { NUM = 2 }
			advcm_add_artifact_modifier = { NUM = 3 }
			advcm_add_artifact_modifier = { NUM = 4 }
		}

		if = {
			limit = { 
				root = {
					var:advcm_artifact_type = flag:advcm_sassanian_sword
				}
			}
			if = {
				limit = {
					scope:newly_created_artifact = {
						OR = { 
							rarity = famed
							rarity = illustrious
						}
					}
				}
				scope:newly_created_artifact = { set_artifact_description = famed_replica_sassanian_sword_description }
			}
			else_if = {
				limit = { scope:newly_created_artifact = { rarity = masterwork } }
				scope:newly_created_artifact = { set_artifact_description = masterwork_replica_sassanian_sword_description }	
			}				
			else = {
				scope:newly_created_artifact = { set_artifact_description = common_replica_sassanian_sword_description }
			}
		}
		
	}
}

advcm_create_bow = {

	global_var:advcm_artifact_selected_char = {
		save_scope_value_as = {
			name = bonus_from_rarity
			value = 0
		}
		save_scope_as = owner
		random_artifact_quality_effect = yes
		random_artifact_wealth_effect = yes
		create_artifact = {
			name = artifact_$TYPE$_name
			description = placeholder
			rarity = $RARITY$
			type = $TYPE$
			visuals = $VISUALS$
			modifier = artifact_prowess_1_modifier
			generate_history = yes
			creator = root
			wealth = $WEALTH$
			quality = $QUALITY$
			save_scope_as = newly_created_artifact
		}

		if = {
			limit = { 
				root = {
					var:advcm_artifact_type = flag:advcm_bow
				}
			}
			set_variable = {
				name = artifact_bow_type
				value = flag:artifact_bow_type_bow
			}
		}

		if = {
			limit = { 
				root = {
					var:advcm_artifact_type = flag:advcm_longbow
				}
			}
			set_variable = {
				name = artifact_bow_type
				value = flag:artifact_bow_type_longbow
			}
		}

		if = {
			limit = { 
				root = {
					var:advcm_artifact_type = flag:advcm_composite_bow
				}
			}
			set_variable = {
				name = artifact_bow_type
				value = flag:artifact_bow_type_composite
			}
		}

		if = {
			limit = { 
				root = {
					var:advcm_artifact_type = flag:advcm_crossbow
				}
			}
			set_variable = {
				name = artifact_bow_type
				value = flag:artifact_bow_type_crossbow
			}
		}

		var:artifact_bow_type = { save_scope_as = bow_type }

		scope:newly_created_artifact = {
			get_artifact_feature_references_effect = yes
			set_artifact_description = artifact_$TYPE$_description
			#advcm_add_new_modifiers_effect = yes
			advcm_add_artifact_modifier = { NUM = 1 }
			advcm_add_artifact_modifier = { NUM = 2 }
			advcm_add_artifact_modifier = { NUM = 3 }
			advcm_add_artifact_modifier = { NUM = 4 }
		}

		remove_variable = artifact_bow_type
	}
}

advcm_create_armor = {

	global_var:advcm_artifact_selected_char = {
		save_scope_value_as = {
			name = bonus_from_rarity
			value = 0
		}
		save_scope_as = owner
		set_armor_artifact_type_effect = {
			BASE_SCOPE = scope:owner
			NO_TYPE = no
		}
		scope:owner = {
			var:artifact_armor_type = { save_scope_as = armor_type }
			remove_variable = artifact_armor_type
		}
		random_artifact_quality_effect = yes
		random_artifact_wealth_effect = yes
		
		if = {
			limit = { scope:armor_type = flag:armor_type_plate }
			create_artifact = {	
				name = placeholder
				description = placeholder # Will be re-generated once decorations are added in the post-creation effects.
				rarity = $RARITY$
				type = armor_plate
				visuals = $VISUALS$
				wealth = $WEALTH$
				quality = $QUALITY$
				modifier = artifact_prowess_1_modifier
				save_scope_as = newly_created_artifact
				
			}
		}
		else_if = {
			limit = { scope:armor_type = flag:armor_type_scale }
			create_artifact = {	
				name = placeholder
				description = placeholder # Will be re-generated once decorations are added in the post-creation effects.
				rarity = $RARITY$
				type = armor_scale
				wealth = $WEALTH$
				quality = $QUALITY$
				visuals = $VISUALS$
				modifier = artifact_prowess_1_modifier
				save_scope_as = newly_created_artifact
				
			}
		}
		else_if = {
			limit = { scope:armor_type = flag:armor_type_lamellar }
			
			create_artifact = {	
				name = placeholder
				description = placeholder # Will be re-generated once decorations are added in the post-creation effects.
				rarity = $RARITY$
				type = armor_lamellar
				visuals = $VISUALS$
				modifier = artifact_prowess_1_modifier
				wealth = $WEALTH$
				quality = $QUALITY$
				save_scope_as = newly_created_artifact
				
			}
		}
		
		else_if = {
			limit = { scope:armor_type = flag:armor_type_laminar }
			
			create_artifact = {	
				name = placeholder
				description = placeholder # Will be re-generated once decorations are added in the post-creation effects.
				rarity = $RARITY$
				type = armor_laminar
				visuals = $VISUALS$
				modifier = artifact_prowess_1_modifier
				wealth = $WEALTH$
				quality = $QUALITY$
				save_scope_as = newly_created_artifact
				
			}
		}
		
		else_if = {
			limit = { scope:armor_type = flag:armor_type_brigandine }
			
			create_artifact = {	
				name = placeholder
				description = placeholder # Will be re-generated once decorations are added in the post-creation effects.
				rarity = $RARITY$
				type = armor_brigandine
				visuals = $VISUALS$
				wealth = $WEALTH$
				quality = $QUALITY$
				modifier = artifact_prowess_1_modifier
				save_scope_as = newly_created_artifact
				
			}
		}
		
		else = {
			create_artifact = {	
				name = placeholder
				description = placeholder # Will be re-generated once decorations are added in the post-creation effects.
				rarity = $RARITY$
				type = armor_mail
				visuals = $VISUALS$
				wealth = $WEALTH$
				quality = $QUALITY$
				modifier = artifact_prowess_1_modifier
				save_scope_as = newly_created_artifact
				
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature_group = armor_decoration
			set_artifact_feature_group = armor_property
			get_artifact_feature_references_effect = yes
			set_artifact_name = artifact_armor_name
			set_artifact_description = artifact_armor_description
		}
	}

	scope:newly_created_artifact = {
		#advcm_add_new_armor_modifiers_effect = yes
		advcm_add_artifact_modifier = { NUM = 1 }
		advcm_add_artifact_modifier = { NUM = 2 }
		advcm_add_artifact_modifier = { NUM = 3 }
		advcm_add_artifact_modifier = { NUM = 4 }
	}

}

advcm_create_brooch = {

	global_var:advcm_artifact_selected_char = {
		save_scope_value_as = {
			name = bonus_from_rarity
			value = 0
		}
		save_scope_as = owner
		random_artifact_quality_effect = yes
		random_artifact_wealth_effect = yes
		create_artifact = {	
			name = artifact_brooch_name
			creator = root
			rarity = $RARITY$
			description = placeholder # Will be updated in the post-creation effects after decorations are assigned.
			visuals = brooch
			type = brooch
			modifier = artifact_placeholder_modifier
			wealth = $WEALTH$
			quality = $QUALITY$
			save_scope_as = newly_created_artifact
		}

		scope:newly_created_artifact = {
			# Finish generating decorations and update description
			if = {
				limit = {
					OR = {
						has_artifact_feature = brooch_decoration_adornment
						has_artifact_feature = brooch_decoration_centerpiece_and_adornment
					}
				}
				set_artifact_feature_group = brooch_adornment
			}
			if = {
				limit = {
					OR = {
						has_artifact_feature = brooch_decoration_centerpiece
						has_artifact_feature = brooch_decoration_centerpiece_and_adornment
					}
				}
				set_artifact_feature_group = brooch_centerpiece
			}
			get_artifact_feature_references_effect = yes
			set_artifact_description = artifact_brooch_description

			# Add artifact modifiers
			#add_scaled_artifact_modifier_minor_prestige_effect = yes
			#add_scaled_artifact_modifier_attractiveness_effect = yes
			advcm_add_artifact_modifier = { NUM = 1 }
			advcm_add_artifact_modifier = { NUM = 2 }
			advcm_add_artifact_modifier = { NUM = 3 }
			advcm_add_artifact_modifier = { NUM = 4 }

			set_variable = {
				name = quality
				value = $QUALITY$
			}
			set_variable = {
				name = wealth
				value = $WEALTH$
			}
		}	
	}
}

advcm_create_necklace = {

	global_var:advcm_artifact_selected_char = {
		save_scope_value_as = {
			name = bonus_from_rarity
			value = 0
		}
		save_scope_as = owner
		random_artifact_quality_effect = yes
		random_artifact_wealth_effect = yes
		create_artifact = {	
			name = artifact_necklace_name
			creator = root
			rarity = $RARITY$
			description = placeholder #properly set later
			visuals = necklace
			type = necklace
			modifier = artifact_placeholder_modifier
			wealth = $WEALTH$
			quality = $QUALITY$
			save_scope_as = newly_created_artifact
		}

		scope:newly_created_artifact = {
			#Loc
			get_artifact_feature_references_effect = yes
			set_artifact_description = artifact_necklace_description
			remove_artifact_modifier = artifact_placeholder_modifier
			#add_scaled_artifact_modifier_minor_prestige_effect = yes
			advcm_add_artifact_modifier = { NUM = 1 }
			advcm_add_artifact_modifier = { NUM = 2 }
			advcm_add_artifact_modifier = { NUM = 3 }
			advcm_add_artifact_modifier = { NUM = 4 }

			if = {
				limit = {
					rarity = illustrious
				}
				#add_artifact_modifier = artifact_attraction_opinion_4_modifier
			}
			else_if = {
				limit = {
					rarity = famed
				}
				#add_artifact_modifier = artifact_attraction_opinion_3_modifier
			}
			else_if = {
				limit = {
					rarity = masterwork
				}
				#add_artifact_modifier = artifact_attraction_opinion_2_modifier
			} 
			else_if = {
				limit = {
					rarity = common
				}
				#add_artifact_modifier = artifact_attraction_opinion_1_modifier
			}

			set_variable = {
				name = quality
				value = $QUALITY$
			}
			set_variable = {
				name = wealth
				value = $WEALTH$
			}
			save_scope_as = newly_created_artifact
		}	
	}
}

advcm_create_crown = {

	global_var:advcm_artifact_selected_char = {
		save_scope_value_as = {
			name = bonus_from_rarity
			value = 0
		}

		save_scope_value_as = {
			name = quality
			value = $QUALITY$
		}
		save_scope_value_as = {
			name = wealth
			value = $WEALTH$
		}
		save_scope_as = owner
		#random_artifact_quality_effect = yes
		#random_artifact_wealth_effect = yes
		create_artifact = {	
			name = artifact_crown_name
			creator = root
			rarity = $RARITY$
			description = placeholder # Will be updated in the post-creation effects
			visuals = crown
			type = helmet
			modifier = artifact_placeholder_modifier
			wealth = $WEALTH$
			quality = $QUALITY$
			save_scope_as = newly_created_artifact
		}

		scope:newly_created_artifact = {
			# Get gem type if necessary and update description
			get_artifact_feature_references_effect = yes
			set_artifact_description = artifact_crown_description
			
			# Crowns with high rarity get more modifiers
			if = {
				limit = {
					rarity = illustrious
				}
				#add_2_scaled_artifact_modifier_rulership_effect = yes
				#add_scaled_artifact_modifier_majesty_effect = yes
				#add_scaled_artifact_modifier_minor_prestige_effect = yes
			}
			else_if = {
				limit = {
					rarity = famed
				}
				#add_2_scaled_artifact_modifier_rulership_effect = yes
				#add_scaled_artifact_modifier_majesty_effect = yes
				#add_scaled_artifact_modifier_minor_prestige_effect = yes
			}
			else_if = {
				limit= {
					rarity = masterwork
				}
				#add_scaled_artifact_modifier_minor_prestige_effect = yes
				#add_scaled_artifact_modifier_rulership_effect = yes
			}
			else_if = {
				limit= {
					rarity = common
				}
				#add_scaled_artifact_modifier_minor_prestige_effect = yes
				#add_scaled_artifact_modifier_rulership_effect = yes
			}
			
			advcm_add_artifact_modifier = { NUM = 1 }
			advcm_add_artifact_modifier = { NUM = 2 }
			advcm_add_artifact_modifier = { NUM = 3 }
			advcm_add_artifact_modifier = { NUM = 4 }

			set_variable = {
				name = quality
				value = scope:quality
			}
			set_variable = {
				name = wealth
				value = scope:wealth
			}

			remove_artifact_modifier = artifact_placeholder_modifier
		}
	}
}

advcm_create_regalia = {

	global_var:advcm_artifact_selected_char = {
		save_scope_value_as = {
			name = bonus_from_rarity
			value = 0
		}
		save_scope_as = owner
		random_artifact_quality_effect = yes
		random_artifact_wealth_effect = yes
		create_artifact = {
			name = artifact_regalia_name
			description = artifact_regalia_description
			creator = root
			rarity = $RARITY$
			visuals = regalia
			type = regalia
			modifier = artifact_placeholder_modifier
			wealth = $WEALTH$
			quality = $QUALITY$
			save_scope_as = newly_created_artifact
		}

		scope:newly_created_artifact = {
			# Prestige modifier is scaled based on the Wealth of the artifact (opulence).
			#add_scaled_artifact_modifier_minor_prestige_effect = yes

			# If we're using the cross-bearing orb (explicit religious symbol), trade some prestige for piety.
			if = {
				limit = {
					has_artifact_feature = regalia_accessory_orb
				}
				#add_artifact_modifier = artifact_monthly_prestige_penalty_modifier
				if = {
					limit = { # Give a tiny bit more piety for high rarity artifacts.
						OR = {
							rarity = famed
							rarity = illustrious
						}
					}
					#add_artifact_modifier = artifact_monthly_piety_5_modifier
				}
				else = {
					#add_artifact_modifier = artifact_monthly_piety_2_modifier
				}
			}

			# Add a Majesty-related modifier based on the Quality of the artifact.
			if = {
				limit = { # Add a second Majesty-related modifier for high rarity artifacts.
					OR = {
						rarity = famed
						rarity = illustrious
					}
				}
				#add_2_scaled_artifact_modifier_majesty_effect = yes
			}
			else = {
				#add_scaled_artifact_modifier_majesty_effect = yes
			}

			#add_scaled_artifact_modifier_attractiveness_effect = yes
			
			advcm_add_artifact_modifier = { NUM = 1 }
			advcm_add_artifact_modifier = { NUM = 2 }
			advcm_add_artifact_modifier = { NUM = 3 }
			advcm_add_artifact_modifier = { NUM = 4 }

			set_variable = {
				name = quality
				value = $QUALITY$
			}
			set_variable = {
				name = wealth
				value = $WEALTH$
			}
			remove_artifact_modifier = artifact_placeholder_modifier
			
		}
	}
}

advcm_create_throne = {

	global_var:advcm_artifact_selected_char = {
		save_scope_value_as = {
			name = bonus_from_rarity
			value = 0
		}
		save_scope_as = owner
		random_artifact_quality_effect = yes
		random_artifact_wealth_effect = yes
		create_artifact = {	
			name = artifact_throne_name
			description = placeholder # Will be regenerated in the post-creation effects
			rarity = $RARITY$
			creator = root
			visuals = throne
			type = throne
			modifier = artifact_placeholder_modifier
			save_scope_as = newly_created_artifact
			wealth = $WEALTH$
			quality = $QUALITY$
			#decaying = no
		}

		scope:newly_created_artifact = {
			set_artifact_description = artifact_throne_description
			
			#Let's add modifiers!
			#add_scaled_artifact_modifier_prestige_effect = yes
			if = {
				limit = { rarity = illustrious }
				#add_scaled_artifact_modifier_majesty_effect = yes
				#add_scaled_artifact_modifier_rulership_effect = yes
			}
			else_if = {
				limit = { rarity = famed }
				#add_scaled_artifact_modifier_majesty_effect = yes
			}
			
			# All thrones have a chance to get some extra Grandeur
			#add_scaled_artifact_modifier_grandeur_big_effect = yes
			advcm_add_artifact_modifier = { NUM = 1 }
			advcm_add_artifact_modifier = { NUM = 2 }
			advcm_add_artifact_modifier = { NUM = 3 }
			advcm_add_artifact_modifier = { NUM = 4 }
			remove_artifact_modifier = artifact_placeholder_modifier
		}
	}
}

advcm_create_box = {

	global_var:advcm_artifact_selected_char = {
		save_scope_value_as = {
			name = bonus_from_rarity
			value = 30
		}
		save_scope_as = owner
		random_artifact_quality_effect = yes
		random_artifact_wealth_effect = yes
		create_artifact = {	
			name = artifact_box_$SIZE$_name
			creator = root
			description = placeholder
			rarity = $RARITY$
			visuals = $SIZE$_box
			type = box
			modifier = artifact_placeholder_modifier
			save_scope_as = newly_created_artifact
			wealth = $WEALTH$
			quality = $QUALITY$
			#decaying = no
		}

		scope:newly_created_artifact = {
			get_artifact_feature_references_effect = yes
			set_artifact_description = artifact_box_small_description

			# Set grandeur
			#add_scaled_artifact_modifier_grandeur_small_effect = yes
			#add_scaled_artifact_modifier_piety_effect = yes
			if = {
				limit = {
					OR = {
						rarity = famed
						rarity = illustrious
					}
				}
				#add_scaled_artifact_modifier_dynasty_prestige_effect = yes
			}
			advcm_add_artifact_modifier = { NUM = 1 }
			advcm_add_artifact_modifier = { NUM = 2 }
			advcm_add_artifact_modifier = { NUM = 3 }
			advcm_add_artifact_modifier = { NUM = 4 }
			remove_artifact_modifier = artifact_placeholder_modifier
		}
	}

}

advcm_create_goblet = {
	global_var:advcm_artifact_selected_char = {
		save_scope_value_as = {
			name = bonus_from_rarity
			value = 0
		}
		save_scope_as = owner
		random_artifact_quality_effect = yes
		random_artifact_wealth_effect = yes
		create_artifact = {	
			name = artifact_goblet_name
			creator = root
			description = placeholder
			rarity = $RARITY$
			visuals = goblet
			type = goblet
			wealth = $WEALTH$
			quality = $QUALITY$
			#decaying = no
			modifier = artifact_placeholder_modifier
			save_scope_as = newly_created_artifact
		}

		scope:newly_created_artifact = {
			set_artifact_description = artifact_goblet_description

			# Set grandeur
			#add_scaled_artifact_modifier_grandeur_small_effect = yes
			
			# Let's add another random effect to keep goblets interesting!
			random_list = {
				10 = {
					#add_scaled_artifact_modifier_minor_prestige_effect = yes
				}
				10 = {
					#add_scaled_artifact_modifier_majesty_effect = yes
				}
				30 = {
					trigger = { rarity = common }
					# Common goblets have a chance to not get any extra modifiers
				}
			}
			advcm_add_artifact_modifier = { NUM = 1 }
			advcm_add_artifact_modifier = { NUM = 2 }
			advcm_add_artifact_modifier = { NUM = 3 }
			advcm_add_artifact_modifier = { NUM = 4 }
			remove_artifact_modifier = artifact_placeholder_modifier
		}
	}
}

advcm_create_chest = {

	global_var:advcm_artifact_selected_char = {
		save_scope_value_as = {
			name = bonus_from_rarity
			value = 0
		}
		save_scope_as = owner
		random_artifact_quality_effect = yes
		random_artifact_wealth_effect = yes
		create_artifact = {	
			name = artifact_chest_name
			creator = root
			description = placeholder # Will be regenerated in the post-creation effects
			rarity = $RARITY$
			visuals = chest
			type = chest
			modifier = artifact_placeholder_modifier
			save_scope_as = newly_created_artifact
			wealth = $WEALTH$
			quality = $QUALITY$
			#decaying = no
		}

		scope:newly_created_artifact = {
			get_artifact_feature_references_effect = yes
			set_artifact_description = artifact_chest_description
			set_variable = {
				name = big_chest
				value = yes
			}
			
			#add_scaled_artifact_modifier_grandeur_small_effect = yes
			#add_scaled_artifact_modifier_piety_effect = yes
			if = {
				limit = {
					OR = {
						rarity = famed
						rarity = illustrious
					}
				}
				#add_scaled_artifact_modifier_dynasty_prestige_effect = yes
			}
			advcm_add_artifact_modifier = { NUM = 1 }
			advcm_add_artifact_modifier = { NUM = 2 }
			advcm_add_artifact_modifier = { NUM = 3 }
			advcm_add_artifact_modifier = { NUM = 4 }
			remove_artifact_modifier = artifact_placeholder_modifier
		}
	}
}

advcm_create_cabinet = {

	global_var:advcm_artifact_selected_char = {
		save_scope_value_as = {
			name = bonus_from_rarity
			value = 0
		}
		save_scope_as = owner
		random_artifact_quality_effect = yes
		random_artifact_wealth_effect = yes
		create_artifact = {	
			name = artifact_$VISUALS$_name
			creator = root
			description = placeholder # Will be regenerated in the post-creation effects
			rarity = $RARITY$
			visuals = $VISUALS$
			type = cabinet
			modifier = artifact_placeholder_modifier
			save_scope_as = newly_created_artifact
			wealth = $WEALTH$
			quality = $QUALITY$
			#decaying = no
		}

		scope:newly_created_artifact = {
			get_artifact_feature_references_effect = yes

			#add_scaled_artifact_modifier_grandeur_small_effect = yes
			#add_scaled_artifact_modifier_piety_effect = yes
			if = {
				limit = {
					OR = {
						rarity = famed
						rarity = illustrious
					}
				}
				#add_scaled_artifact_modifier_dynasty_prestige_effect = yes
			}
			remove_artifact_modifier = artifact_placeholder_modifier
			advcm_add_artifact_modifier = { NUM = 1 }
			advcm_add_artifact_modifier = { NUM = 2 }
			advcm_add_artifact_modifier = { NUM = 3 }
			advcm_add_artifact_modifier = { NUM = 4 }
			set_variable = {
				name = $VISUALS$
				value = yes
			}
			set_artifact_description = artifact_$VISUALS$_description
		}
	}
}

advcm_create_wall_shield = {

	global_var:advcm_artifact_selected_char = {
		save_scope_value_as = {
			name = bonus_from_rarity
			value = 0
		}
		save_scope_as = owner
		random_artifact_quality_effect = yes
		random_artifact_wealth_effect = yes
		create_artifact = {
			name = artifact_wall_shield_name
			creator = root
			description = artifact_wall_shield_description
			rarity = $RARITY$
			visuals = $VISUALS$
			visuals_source = root.primary_title
			type = $TYPE$
			modifier = artifact_placeholder_modifier
			save_scope_as = newly_created_artifact
			wealth = $WEALTH$
			quality = $QUALITY$
			#decaying = no
		}

		scope:newly_created_artifact = {
			#add_scaled_artifact_modifier_grandeur_small_effect = yes
			#add_scaled_artifact_modifier_dynasty_prestige_effect = yes
			if = {
				limit = {
					OR = {
						rarity = famed
						rarity = illustrious
					}
				}
				#add_scaled_artifact_modifier_minor_prestige_effect = yes
			}
			advcm_add_artifact_modifier = { NUM = 1 }
			advcm_add_artifact_modifier = { NUM = 2 }
			advcm_add_artifact_modifier = { NUM = 3 }
			advcm_add_artifact_modifier = { NUM = 4 }
			remove_artifact_modifier = artifact_placeholder_modifier
		}
	}
}

advcm_create_tapestry = {

	global_var:advcm_artifact_selected_char = {
		save_scope_value_as = {
			name = bonus_from_rarity
			value = 0
		}
		save_scope_as = owner
		random_artifact_quality_effect = yes
		random_artifact_wealth_effect = yes
		create_artifact = {	
			name = artifact_wall_tapestry_name
			description = placeholder # Will be regenerated in the post-creation effects
			creator = root
			rarity = $RARITY$
			visuals = tapestry
			type = tapestry
			modifier = artifact_placeholder_modifier
			save_scope_as = newly_created_artifact
			wealth = $WEALTH$
			quality = $QUALITY$
			#decaying = no
		}

		scope:newly_created_artifact = {
			set_artifact_description = artifact_wall_tapestry_description
			# Set grandeur
			#add_scaled_artifact_modifier_grandeur_big_effect = yes
			
			if = {
				limit = {
					has_artifact_feature = tapestry_scene_religious
				}
				#add_scaled_artifact_modifier_piety_effect = yes
			}
			else = {
				#add_scaled_artifact_modifier_majesty_effect = yes
			}

			if = {
				limit = {
					OR = {
						rarity = famed
						rarity = illustrious
					}
				}
				#add_scaled_artifact_modifier_dynasty_prestige_effect = yes
			}
			
			advcm_add_artifact_modifier = { NUM = 1 }
			advcm_add_artifact_modifier = { NUM = 2 }
			advcm_add_artifact_modifier = { NUM = 3 }
			advcm_add_artifact_modifier = { NUM = 4 }
			remove_artifact_modifier = artifact_placeholder_modifier
		}
	}
}

advcm_add_artifact_modifier = {
   if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_diplomacy
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_diplomacy NUM = $NUM$ }
	}
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_martial
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_martial NUM = $NUM$ }
	}
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_stewardship
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_stewardship NUM = $NUM$ }
	}
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_intrigue
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_intrigue NUM = $NUM$ }
	}
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_learning
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_learning NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_prowess
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_prowess NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_knight_limit
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_knight_limit NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_knight_effectiveness
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_knight_effectiveness_mult NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_tolerance_advantage
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_tolerance_advantage_mod NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_controlled_province_advantage
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_controlled_province_advantage NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_plains_advantage
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_plains_advantage NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_farmlands_advantage
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_farmlands_advantage NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_hills_advantage
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_hills_advantage NUM = $NUM$ }
	}
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_mountains_advantage
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_mountains_advantage NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_desert_advantage
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_desert_advantage NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_desert_mountains_advantage
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_desert_mountains_advantage NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_oasis_advantage
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_oasis_advantage NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_jungle_advantage
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_jungle_advantage NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_forest_advantage
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_forest_advantage NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_taiga_advantage
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_taiga_advantage NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_wetlands_advantage
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_wetlands_advantage NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_steppe_advantage
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_steppe_advantage NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_floodplains_advantage
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_floodplains_advantage NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_drylands_advantage
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_drylands_advantage NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_court_grandeur_baseline_add
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_court_grandeur_baseline_add NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_dynasty_opinion
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_dynasty_opinion NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_child_opinion
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_child_opinion NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_general_opinion
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_general_opinion NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_vassal_opinion
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_vassal_opinion NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_attraction_opinion
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_attraction_opinion NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_same_faith_opinion
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_same_faith_opinion NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_spouse_opinion
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_spouse_opinion NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_courtier_and_guest_opinion
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_courtier_and_guest_opinion NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_dread_baseline
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_dread_baseline_add NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_vassal_limit
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_vassal_limit NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_domain_limit
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_domain_limit NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_owned_hostile_scheme_success_chance_add
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_owned_hostile_scheme_success_chance_add NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_owned_personal_scheme_success_chance_add
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_owned_personal_scheme_success_chance_add NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_owned_scheme_secrecy_add
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_owned_scheme_secrecy_add NUM = $NUM$ }
	}
	
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_levy_reinforcement_rate
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_levy_reinforcement_rate NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_raid_speed
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_raid_speed NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_levy_reinforcement_rate_same_faith
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_levy_reinforcement_rate_same_faith NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_enemy_hard_casualty_modifier
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_enemy_hard_casualty_modifier NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_hard_casualty_modifier
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_hard_casualty_modifier NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_heavy_cavalry_toughness_mult
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_heavy_cavalry_toughness_mult NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_heavy_infantry_toughness_mult
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_heavy_infantry_toughness_mult NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_retreat_losses
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_retreat_losses NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_pursue_efficiency
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_pursue_efficiency NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_monthly_prestige
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_monthly_prestige NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_short_reign_duration_mult
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_short_reign_duration_mult NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_monthly_dynasty_prestige_mult
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_monthly_dynasty_prestige_mult NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_monthly_dynasty_prestige
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_monthly_dynasty_prestige NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_tyranny_loss_mult
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_tyranny_loss_mult NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_dread_gain_mult
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_dread_gain_mult NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_mercenary_hire_cost_mult
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_mercenary_hire_cost_mult NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_vassal_tax_contribution_mult
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_vassal_tax_contribution_mult NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_men_at_arms_maintenance
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_men_at_arms_maintenance NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_domain_tax_mult
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_domain_tax_mult NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_build_gold_cost
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_build_gold_cost NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_build_speed
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_build_speed NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_monthly_income_mult
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_monthly_income_mult NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_monthly_piety
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_monthly_piety NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_monthly_piety_gain_mult
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_monthly_piety_gain_mult NUM = $NUM$  }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_fertility
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_fertility NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_stress_gain_mult
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_stress_gain_mult NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_health
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_health NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_monthly_diplomacy_lifestyle_xp_gain_mult
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_monthly_diplomacy_lifestyle_xp_gain_mult NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_monthly_martial_lifestyle_xp_gain_mult
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_monthly_martial_lifestyle_xp_gain_mult NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_monthly_stewardship_lifestyle_xp_gain_mult
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_monthly_stewardship_lifestyle_xp_gain_mult NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_monthly_intrigue_lifestyle_xp_gain_mult
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_monthly_intrigue_lifestyle_xp_gain_mult NUM = $NUM$ }
	}
	
	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_monthly_learning_lifestyle_xp_gain_mult
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_monthly_learning_lifestyle_xp_gain_mult NUM = $NUM$ }
	}

	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_years_of_fertility
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_years_of_fertility NUM = $NUM$ }
	}

	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_life_expectancy
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_life_expectancy NUM = $NUM$ }
	}

	else_if = {
		limit = {
			scope:modifier_target.var:advcm_artifact_modifier_$NUM$ = flag:advcm_epidemic_resistance
		}
		
		advcm_add_modifier_inject =  { MODIFIER = advcm_epidemic_resistance NUM = $NUM$ }
	}
}

advcm_add_modifier_inject = {
	
	if = {
		limit = {
			scope:modifier_target.var:advcm_modifier$NUM$_value < 0
		}
		
		while = {
			count = {
				value = scope:modifier_target.var:advcm_modifier$NUM$_value
				multiply = -1
			}
			add_artifact_modifier = $MODIFIER$_neg_1
		}
	}
	else = {
		while = {
			count = scope:modifier_target.var:advcm_modifier$NUM$_value
			add_artifact_modifier = $MODIFIER$_1
		}
	}
}